<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddMotion" xml:space="preserve">
    <value>Add motion</value>
  </data>
  <data name="AdvancedDifficulty" xml:space="preserve">
    <value>Advanced difficulty</value>
  </data>
  <data name="Angle" xml:space="preserve">
    <value>Angle</value>
  </data>
  <data name="IntervalForTable" xml:space="preserve">
    <value>Time interval (s)</value>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>Playing with Physics: Projectile motions</value>
  </data>
  <data name="ShortAppName" xml:space="preserve">
    <value>Projectile motions</value>
  </data>
  <data name="PauseAfterChanges" xml:space="preserve">
    <value>Pause after changes</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ChooseColor" xml:space="preserve">
    <value>Choose color</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="YouWin" xml:space="preserve">
    <value>You win!</value>
  </data>
  <data name="Missed" xml:space="preserve">
    <value>Missed...</value>
  </data>
  <data name="Color" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="CopyToClipboard" xml:space="preserve">
    <value>Copy to clipboard</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="WallHeight" xml:space="preserve">
    <value>Wall height</value>
  </data>
  <data name="BreakDownMotions" xml:space="preserve">
    <value>Break down motions</value>
  </data>
  <data name="WallDistance" xml:space="preserve">
    <value>Wall distance</value>
  </data>
  <data name="CastleDistance" xml:space="preserve">
    <value>Castle distance</value>
  </data>
  <data name="Duplicate" xml:space="preserve">
    <value>Duplicate</value>
  </data>
  <data name="EasyDifficulty" xml:space="preserve">
    <value>Easy difficulty</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditMotion" xml:space="preserve">
    <value>Edit motion</value>
  </data>
  <data name="Fire" xml:space="preserve">
    <value>Fire!</value>
  </data>
  <data name="FreeFall" xml:space="preserve">
    <value>Free fall</value>
  </data>
  <data name="Gravity" xml:space="preserve">
    <value>Gravity</value>
  </data>
  <data name="HorizontalMotion" xml:space="preserve">
    <value>Horizontal throw</value>
  </data>
  <data name="InvalidInput" xml:space="preserve">
    <value>Invalid input</value>
  </data>
  <data name="JumpSize" xml:space="preserve">
    <value>Jump size</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="Mass" xml:space="preserve">
    <value>Mass</value>
  </data>
  <data name="Motion" xml:space="preserve">
    <value>Motion</value>
  </data>
  <data name="NewGame" xml:space="preserve">
    <value>New game</value>
  </data>
  <data name="Origin" xml:space="preserve">
    <value>Origin</value>
  </data>
  <data name="PickColor" xml:space="preserve">
    <value>Pick...</value>
  </data>
  <data name="ProjectileMotion" xml:space="preserve">
    <value>Projectile motion</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SelectedMotion" xml:space="preserve">
    <value>Selected motion</value>
  </data>
  <data name="SelectMotionTip" xml:space="preserve">
    <value>Select a motion to see current values.</value>
  </data>
  <data name="ShowHideIrrelevantColumns" xml:space="preserve">
    <value>Show/Hide Irrelevant Columns</value>
  </data>
  <data name="ShowHideZeroes" xml:space="preserve">
    <value>Show/hide zero columns</value>
  </data>
  <data name="ShowValues" xml:space="preserve">
    <value>Show values</value>
  </data>
  <data name="ShowValuesTable" xml:space="preserve">
    <value>Show values table</value>
  </data>
  <data name="Speed" xml:space="preserve">
    <value>Speed</value>
  </data>
  <data name="TopicName" xml:space="preserve">
    <value>Projectile motion</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="VerticalMotion" xml:space="preserve">
    <value>Vertical throw</value>
  </data>
  <data name="Game" xml:space="preserve">
    <value>Game</value>
  </data>
  <data name="TooManyMotionsDescription" xml:space="preserve">
    <value>Can't render more than 5 motions at once. Plese remove one.</value>
  </data>
  <data name="TooManyMotionsTitle" xml:space="preserve">
    <value>Can't add another motion</value>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>Bodies moving in close proximity to the Earth can be considered as bodies moving in a homogeneous gravitational field.
The animation will allow the selection of basic movements (free fall, vertical litter, horizontal litter, oblique litter) and the selection of initial parameters (initial speed, elevation angle, height). The program automatically adjusts the scale and the output will also be a table of values, including the calculated parameters.
The program can be used to calculate movement time, height, distance and use it to solve specific tasks.

Content authors: Vladimír Kafka, Pavel Vlček
Programmers: Daniel Zikmund, Martin Zikmund
Graphics: Petr Weinlich</value>
  </data>
  <data name="RaftSpeed" xml:space="preserve">
    <value>Raft speed</value>
  </data>
  <data name="InitialSpeedIsTooHigh" xml:space="preserve">
    <value>Initial speed is too high.</value>
  </data>
  <data name="WeightMustBeMoreThanZero" xml:space="preserve">
    <value>Weight must be at least 1 kg.</value>
  </data>
  <data name="InvalidInputSpeed" xml:space="preserve">
    <value>Zvolte jinou rychlost</value>
  </data>
</root>