<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddMotion" xml:space="preserve">
    <value>Add motion</value>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>The application enables the simulation of movements on an inclined plane and the travel of a body along a horizontal plane following the end of an inclined plane. After entering the input conditions, it is possible to study the motion of the body on an inclined plane. The movement can be accelerated, slowed down or stopped at any time. The current values of physical quantities are displayed, it is possible to display them clearly in a table.
Movement on an inclined plane with a range can be simulated in a fun way in a simple game.

Content authors: Pavel Mládek, Pavel Jirman
Developers: Martin Zikmund, Daniel Zikmund
Graphics: Petr Weinlich</value>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>Playing with Physics: Inclined Plane</value>
  </data>
  <data name="ChangeMotion" xml:space="preserve">
    <value>Change motion</value>
  </data>
  <data name="Color" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="DrawMotion" xml:space="preserve">
    <value>Draw motion</value>
  </data>
  <data name="Drift_MetalMetalDry" xml:space="preserve">
    <value>Kov – kov (dry)</value>
  </data>
  <data name="Drift_MetalMetalOiled" xml:space="preserve">
    <value>Kov – kov (oiled)</value>
  </data>
  <data name="Drift_MetalMetalWet" xml:space="preserve">
    <value>Kov – kov (wet)</value>
  </data>
  <data name="Drift_MetalOakDry" xml:space="preserve">
    <value>Kov – oak wood (dry)</value>
  </data>
  <data name="Drift_MetalOakWet" xml:space="preserve">
    <value>Kov – oak wood (wet)</value>
  </data>
  <data name="Drift_NylonNylon" xml:space="preserve">
    <value>Nylon – nylon</value>
  </data>
  <data name="Drift_SkinMetalDry" xml:space="preserve">
    <value>Skin – metal (dry)</value>
  </data>
  <data name="Drift_SkinMetalOiled" xml:space="preserve">
    <value>Skin – metal (oiled)</value>
  </data>
  <data name="Drift_SkinMetalWet" xml:space="preserve">
    <value>Skin – metal (wet)</value>
  </data>
  <data name="Drift_SkinOak" xml:space="preserve">
    <value>Skin – dub</value>
  </data>
  <data name="Drift_SteelAgateDry" xml:space="preserve">
    <value>Steel – agate (dry)</value>
  </data>
  <data name="Drift_SteelAgateOiled" xml:space="preserve">
    <value>Steel – agate (oiled)</value>
  </data>
  <data name="Drift_SteelIce" xml:space="preserve">
    <value>Steel – ice</value>
  </data>
  <data name="Drift_SteelSilicaDry" xml:space="preserve">
    <value>Steel – agate (oiled)</value>
  </data>
  <data name="Drift_StoneIce" xml:space="preserve">
    <value>Stone – ice (Curling)</value>
  </data>
  <data name="Drift_TeflonTeflon" xml:space="preserve">
    <value>Teflon – teflon</value>
  </data>
  <data name="Drift_TireConcreteDry" xml:space="preserve">
    <value>Tire – beton (dry)</value>
  </data>
  <data name="Drift_TireConcreteWet" xml:space="preserve">
    <value>Tire – beton (wet)</value>
  </data>
  <data name="Drift_VeryWellPolishedSurfaces" xml:space="preserve">
    <value>Very well polished surfaces</value>
  </data>
  <data name="Drift_WoodSnow" xml:space="preserve">
    <value>Wood – ice (snow)</value>
  </data>
  <data name="Drift_WoodStone" xml:space="preserve">
    <value>Wood – stone</value>
  </data>
  <data name="Drift_WoodWoodDry" xml:space="preserve">
    <value>Wood – wood (dry)</value>
  </data>
  <data name="Drift_WoodWoodSoaped" xml:space="preserve">
    <value>Wood – wood (soaped)</value>
  </data>
  <data name="Game" xml:space="preserve">
    <value>Game</value>
  </data>
  <data name="GameResults" xml:space="preserve">
    <value>Game over!</value>
  </data>
  <data name="HorizontalPlaneDriftCoefficient" xml:space="preserve">
    <value>Horizontal drift coefficient:</value>
  </data>
  <data name="HorizontalPlaneLength" xml:space="preserve">
    <value>Horizontal length:</value>
  </data>
  <data name="Horizontal_Disable" xml:space="preserve">
    <value>Without horizontal plane</value>
  </data>
  <data name="Horizontal_Enable" xml:space="preserve">
    <value>With horizontal plane</value>
  </data>
  <data name="InclinedPlaneDriftCoefficient" xml:space="preserve">
    <value>Inclined plane drift coefficient:</value>
  </data>
  <data name="InclinedPlaneLength" xml:space="preserve">
    <value>Inclined plane length:</value>
  </data>
  <data name="Input_Angle" xml:space="preserve">
    <value>Angle</value>
  </data>
  <data name="Input_DriftCoefficient" xml:space="preserve">
    <value>Drift coefficient</value>
  </data>
  <data name="Input_General" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="Input_Gravity" xml:space="preserve">
    <value>Gravity</value>
  </data>
  <data name="Input_HorizontalPlane" xml:space="preserve">
    <value>Horizontal plane</value>
  </data>
  <data name="Input_InclinedPlane" xml:space="preserve">
    <value>Inclined plane</value>
  </data>
  <data name="Input_InitialSpeed" xml:space="preserve">
    <value>Počáteční rychlost</value>
  </data>
  <data name="Input_Length" xml:space="preserve">
    <value>Length</value>
  </data>
  <data name="Input_Mass" xml:space="preserve">
    <value>Mass</value>
  </data>
  <data name="JumpSize" xml:space="preserve">
    <value>Jump Size</value>
  </data>
  <data name="PlaceStone" xml:space="preserve">
    <value>Place stone</value>
  </data>
  <data name="ShortAppName" xml:space="preserve">
    <value>Inclined Plane</value>
  </data>
  <data name="StartNewGame" xml:space="preserve">
    <value>Start new game</value>
  </data>
  <data name="TargetDistance" xml:space="preserve">
    <value>Target center distance:</value>
  </data>
  <data name="ThrowDistance" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="ThrowInProgress" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="TvBoxAverageDistance" xml:space="preserve">
    <value>Average distance: {0}</value>
  </data>
  <data name="TvBoxThrowCounter" xml:space="preserve">
    <value>Round: {0}/{1}</value>
  </data>
</root>