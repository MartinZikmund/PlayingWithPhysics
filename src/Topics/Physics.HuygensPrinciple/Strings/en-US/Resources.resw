<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDescription" xml:space="preserve">
    <value>The Huygens–Fresnel principle makes it possible to represent waves in an isotropic medium, ie in an environment in which the waves propagate in all directions at the same speed. Waves are represented by wavefronts and rays. The wavefronts have a spherical shape and are considered to be a plane at a great distance from the source of the waves. The rays as perpendicular to the wavefront show the direction of propagation of the waves at a given point.

Content authors: Matěj Hudec
Programmers: Daniel Zikmund, Martin Zikmund
Graphics: Petr Weinlich</value>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>Playing with Physics: Huygens–Fresnel Principle</value>
  </data>
  <data name="Brush" xml:space="preserve">
    <value>Brush</value>
  </data>
  <data name="BrushShape" xml:space="preserve">
    <value>Brush shape</value>
  </data>
  <data name="BrushSize" xml:space="preserve">
    <value>Brush size</value>
  </data>
  <data name="CellState_Empty" xml:space="preserve">
    <value>Empty</value>
  </data>
  <data name="CellState_Source" xml:space="preserve">
    <value>Source</value>
  </data>
  <data name="CellState_Wall" xml:space="preserve">
    <value>Wall</value>
  </data>
  <data name="ClearDrawing" xml:space="preserve">
    <value>Clear all</value>
  </data>
  <data name="Drawing" xml:space="preserve">
    <value>Drawing</value>
  </data>
  <data name="DrawingTool" xml:space="preserve">
    <value>Tool</value>
  </data>
  <data name="DrawingTool_Brush" xml:space="preserve">
    <value>Brush</value>
  </data>
  <data name="DrawingTool_Eraser" xml:space="preserve">
    <value>Eraser</value>
  </data>
  <data name="DrawingWarning" xml:space="preserve">
    <value>Warning! The result of the simulation may be non-realistic when the wall thickness is smaller than the radius of the secondary wave used!</value>
  </data>
  <data name="Eraser" xml:space="preserve">
    <value>Eraser</value>
  </data>
  <data name="FieldSize" xml:space="preserve">
    <value>Field size</value>
  </data>
  <data name="Off" xml:space="preserve">
    <value>Off</value>
  </data>
  <data name="On" xml:space="preserve">
    <value>On</value>
  </data>
  <data name="PickScenePreset" xml:space="preserve">
    <value>Pick a scenario...</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="SaveAndStart" xml:space="preserve">
    <value>Save and start</value>
  </data>
  <data name="ScenePreset_Brick" xml:space="preserve">
    <value>Brick</value>
  </data>
  <data name="ScenePreset_Circle" xml:space="preserve">
    <value>Circle</value>
  </data>
  <data name="ScenePreset_Line" xml:space="preserve">
    <value>Line</value>
  </data>
  <data name="ScenePreset_LineWall" xml:space="preserve">
    <value>Line with wall</value>
  </data>
  <data name="ScenePreset_Point" xml:space="preserve">
    <value>Point</value>
  </data>
  <data name="ScenePreset_PointWall" xml:space="preserve">
    <value>Point with wall</value>
  </data>
  <data name="ScenePreset_Snowman" xml:space="preserve">
    <value>Snowman</value>
  </data>
  <data name="ScenePreset_Square" xml:space="preserve">
    <value>Square</value>
  </data>
  <data name="SetDefault" xml:space="preserve">
    <value>Set default</value>
  </data>
  <data name="ShapeType_Circle" xml:space="preserve">
    <value>Circle</value>
  </data>
  <data name="ShapeType_Square" xml:space="preserve">
    <value>Square</value>
  </data>
  <data name="ShortAppName" xml:space="preserve">
    <value>Huygens–Fresnel Principle</value>
  </data>
  <data name="ShowSamplePoints" xml:space="preserve">
    <value>Show sample points</value>
  </data>
  <data name="ShowSource" xml:space="preserve">
    <value>Show source</value>
  </data>
  <data name="ShowWave" xml:space="preserve">
    <value>Show wave</value>
  </data>
  <data name="ShowWaveEdge" xml:space="preserve">
    <value>Show wavefront</value>
  </data>
  <data name="StartDrawing" xml:space="preserve">
    <value>Start drawing</value>
  </data>
  <data name="StepRadius" xml:space="preserve">
    <value>Step radius</value>
  </data>
  <data name="SurfaceType" xml:space="preserve">
    <value>Type</value>
  </data>
</root>