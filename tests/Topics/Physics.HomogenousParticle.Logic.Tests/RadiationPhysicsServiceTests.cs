using Physics.HomogenousParticle.Services;
using Physics.HomongenousParticle.Logic;
using Physics.HomongenousParticle.Logic.PhysicsServices;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace Physics.HomogenousParticle.Logic.Tests
{
    public class RadiationPhysicsServiceTests
    {
        [InlineData(-1.91, 0)]
        [InlineData(-1.5, 0)]
        [InlineData(-0.5, 0)]
        [InlineData(0.1, -0.000913829)]
        [InlineData(0.3, -0.008222791)]
        [InlineData(0.5, -0.022831811)]
        [InlineData(0.7, -0.04472309)]
        [InlineData(0.9, -0.073869956)]
        [InlineData(1.1, -0.110236899)]
        [InlineData(1.3, -0.153779611)]
        [InlineData(1.5, -0.204445042)]
        [InlineData(1.7, -0.262171464)]
        [InlineData(1.9, -0.326888546)]
        [InlineData(2.1, -0.398517441)]
        [InlineData(2.3, -0.476970879)]
        [InlineData(2.5, -0.562153278)]
        [InlineData(2.7, -0.653960855)]
        [InlineData(2.9, -0.752281757)]
        [InlineData(3.1, -0.856996196)]
        [InlineData(3.3, -0.967976592)]
        [InlineData(3.5, -1.085087734)]
        [InlineData(3.7, -1.20818694)]
        [InlineData(3.9, -1.337124231)]
        [InlineData(4.1, -1.471742519)]
        [InlineData(4.3, -1.61187779)]
        [InlineData(4.5, -1.757359313)]
        [InlineData(4.7, -1.90800984)]
        [InlineData(4.81, -1.993004667)]
        [InlineData(4.83, -2.0086)]
        [InlineData(4.9, -2.0632)]
        [InlineData(11, -6.8245)]
        [Theory]
        public void AlphaX(double time, double expectedX)
        {
            var physicsService = new RadiationPhysicsService(
                new RadiationMotionSetup(0, RadiationType.Alfa, "#000000"));
            var actualX = physicsService.ComputeX(time);
            Assert.Equal(expectedX, actualX, 4);
        }

        [InlineData(-1.91, -2.000147323)]
        [InlineData(-1.9, -1.989675347)]
        [InlineData(-1.5, -1.570796327)]
        [InlineData(-1, -1.047197551)]
        [InlineData(-0.5, -0.523598776)]
        [InlineData(0, 0)]
        [InlineData(0.1, 0.104714439)]
        [InlineData(0.2, 0.20939698)]
        [InlineData(0.3, 0.314015737)]
        [InlineData(0.4, 0.418538842)]
        [InlineData(0.5, 0.522934456)]
        [InlineData(0.6, 0.62717078)]
        [InlineData(0.7, 0.73121606)]
        [InlineData(0.8, 0.835038606)]
        [InlineData(0.9, 0.93860679)]
        [InlineData(1, 1.041889066)]
        [InlineData(1.1, 1.144853972)]
        [InlineData(1.2, 1.247470145)]
        [InlineData(1.3, 1.349706326)]
        [InlineData(1.4, 1.451531374)]
        [InlineData(1.5, 1.552914271)]
        [InlineData(1.6, 1.653824135)]
        [InlineData(1.7, 1.754230228)]
        [InlineData(1.8, 1.854101966)]
        [InlineData(1.9, 1.953408927)]
        [InlineData(2, 2.05212086)]
        [InlineData(2.1, 2.150207697)]
        [InlineData(2.2, 2.24763956)]
        [InlineData(2.3, 2.344386771)]
        [InlineData(2.4, 2.440419858)]
        [InlineData(2.5, 2.53570957)]
        [InlineData(2.6, 2.630226881)]
        [InlineData(2.7, 2.723942998)]
        [InlineData(2.8, 2.816829377)]
        [InlineData(2.9, 2.908857721)]
        [InlineData(3, 3)]
        [InlineData(3.1, 3.090228449)]
        [InlineData(3.2, 3.179515585)]
        [InlineData(3.3, 3.26783421)]
        [InlineData(3.4, 3.355157421)]
        [InlineData(3.5, 3.441458618)]
        [InlineData(3.6, 3.526711514)]
        [InlineData(3.7, 3.610890139)]
        [InlineData(3.8, 3.693968852)]
        [InlineData(3.9, 3.775922346)]
        [InlineData(4, 3.856725658)]
        [InlineData(4.1, 3.936354174)]
        [InlineData(4.2, 4.014783638)]
        [InlineData(4.3, 4.09199016)]
        [InlineData(4.4, 4.167950223)]
        [InlineData(4.5, 4.242640687)]
        [InlineData(4.6, 4.316038802)]
        [InlineData(4.7, 4.38812221)]
        [InlineData(4.8, 4.458868953)]
        [InlineData(4.81, 4.465869277)]
        [InlineData(4.82, 4.472855998)]
        [InlineData(4.83, 4.4798)]
        [InlineData(11, 8.7873)]
        [Theory]
        public void AlphaY(double time, double expectedY)
        {
            var physicsService = new RadiationPhysicsService(
                new RadiationMotionSetup(0, RadiationType.Alfa, "#000000"));
            var actualY = physicsService.ComputeY(time);
            Assert.Equal(expectedY, actualY, 4);
        }

        [InlineData(-1.91, 0)]
        [InlineData(-1.9, 0)]
        [InlineData(-1.5, 0)]
        [InlineData(-1, 0)]
        [InlineData(-0.5, 0)]
        [InlineData(0, 0)]
        [InlineData(0.1, -0.00274093)]
        [InlineData(0.2, -0.010956209)]
        [InlineData(0.3, -0.024623319)]
        [InlineData(0.4, -0.043704799)]
        [InlineData(0.5, -0.068148347)]
        [InlineData(0.6, -0.097886967)]
        [InlineData(0.7, -0.132839147)]
        [InlineData(0.8, -0.172909085)]
        [InlineData(0.9, -0.217986952)]
        [InlineData(1, -0.267949192)]
        [InlineData(1.1, -0.322658864)]
        [InlineData(1.2, -0.381966011)]
        [InlineData(1.3, -0.445708077)]
        [InlineData(1.4, -0.513710349)]
        [InlineData(1.5, -0.585786438)]
        [InlineData(1.6, -0.661738787)]
        [InlineData(1.7, -0.741359218)]
        [InlineData(1.8, -0.824429495)]
        [InlineData(1.9, -0.91072193)]
        [InlineData(2, -1)]
        [InlineData(2.1, -1.092019001)]
        [InlineData(2.2, -1.186526714)]
        [InlineData(2.3, -1.283264101)]
        [InlineData(2.4, -1.381966011)]
        [InlineData(2.5, -1.48236191)]
        [InlineData(2.6, -1.584176618)]
        [InlineData(2.7, -1.68713107)]
        [InlineData(2.8, -1.790943073)]
        [InlineData(2.9, -1.895328088)]
        [InlineData(3, -2)]
        [InlineData(3.5, -2.523598776)]
        [InlineData(4, -3.047197551)]
        [InlineData(4.5, -3.570796327)]
        [InlineData(5, -4.094395102)]
        [InlineData(5.5, -4.617993878)]
        [InlineData(6, -5.141592654)]
        [InlineData(6.5, -5.665191429)]
        [InlineData(8, -7.235987756)]
        [InlineData(9, -8.283185307)]
        [Theory]
        public void BetaPlusX(double time, double expectedX)
        {
            var physicsService = new RadiationPhysicsService(
                new RadiationMotionSetup(0, RadiationType.BetaPlus, "#000000"));
            var actualX = physicsService.ComputeX(time);
            Assert.Equal(expectedX, actualX, 4);
        }

        [InlineData(-1.91, -2.000147323)]
        [InlineData(-1.9, -1.989675347)]
        [InlineData(-1.5, -1.570796327)]
        [InlineData(-1, -1.047197551)]
        [InlineData(-0.5, -0.523598776)]
        [InlineData(0, 0)]
        [InlineData(0.1, 0.104671912)]
        [InlineData(0.2, 0.209056927)]
        [InlineData(0.3, 0.31286893)]
        [InlineData(0.4, 0.415823382)]
        [InlineData(0.5, 0.51763809)]
        [InlineData(0.6, 0.618033989)]
        [InlineData(0.7, 0.716735899)]
        [InlineData(0.8, 0.813473286)]
        [InlineData(0.9, 0.907980999)]
        [InlineData(1, 1)]
        [InlineData(1.1, 1.08927807)]
        [InlineData(1.2, 1.175570505)]
        [InlineData(1.3, 1.258640782)]
        [InlineData(1.4, 1.338261213)]
        [InlineData(1.5, 1.414213562)]
        [InlineData(1.6, 1.486289651)]
        [InlineData(1.7, 1.554291923)]
        [InlineData(1.8, 1.618033989)]
        [InlineData(1.9, 1.677341136)]
        [InlineData(2, 1.732050808)]
        [InlineData(2.1, 1.782013048)]
        [InlineData(2.2, 1.827090915)]
        [InlineData(2.3, 1.867160853)]
        [InlineData(2.4, 1.902113033)]
        [InlineData(2.5, 1.931851653)]
        [InlineData(2.6, 1.956295201)]
        [InlineData(2.7, 1.975376681)]
        [InlineData(2.8, 1.989043791)]
        [InlineData(2.9, 1.99725907)]
        [InlineData(3, 2)]
        [InlineData(3.5, 2)]
        [InlineData(4, 2)]
        [InlineData(4.5, 2)]
        [InlineData(5, 2)]
        [InlineData(5.5, 2)]
        [InlineData(6, 2)]
        [InlineData(6.5, 2)]
        [InlineData(7, 2)]
        [InlineData(7.5, 2)]
        [InlineData(8, 2)]
        [InlineData(9, 2)]
        [InlineData(10, 2)]
        [Theory]
        public void BetaPlusY(double time, double expectedY)
        {
            var physicsService = new RadiationPhysicsService(
                new RadiationMotionSetup(0, RadiationType.BetaPlus, "#000000"));
            var actualY = physicsService.ComputeY(time);
            Assert.Equal(expectedY, actualY, 4);
        }


        [InlineData(-1.91, 0)]
        [InlineData(-1.9, 0)]
        [InlineData(-1.5, 0)]
        [InlineData(-1, 0)]
        [InlineData(-0.5, 0)]
        [InlineData(0, 0)]
        [InlineData(0.1, 0.00274093)]
        [InlineData(0.2, 0.010956209)]
        [InlineData(0.3, 0.024623319)]
        [InlineData(0.4, 0.043704799)]
        [InlineData(0.5, 0.068148347)]
        [InlineData(0.6, 0.097886967)]
        [InlineData(0.7, 0.132839147)]
        [InlineData(0.8, 0.172909085)]
        [InlineData(0.9, 0.217986952)]
        [InlineData(1, 0.267949192)]
        [InlineData(1.1, 0.322658864)]
        [InlineData(1.2, 0.381966011)]
        [InlineData(1.3, 0.445708077)]
        [InlineData(1.4, 0.513710349)]
        [InlineData(1.5, 0.585786438)]
        [InlineData(1.6, 0.661738787)]
        [InlineData(1.7, 0.741359218)]
        [InlineData(1.8, 0.824429495)]
        [InlineData(1.9, 0.91072193)]
        [InlineData(2, 1)]
        [InlineData(2.1, 1.092019001)]
        [InlineData(2.2, 1.186526714)]
        [InlineData(2.3, 1.283264101)]
        [InlineData(2.4, 1.381966011)]
        [InlineData(2.5, 1.48236191)]
        [InlineData(2.6, 1.584176618)]
        [InlineData(2.7, 1.68713107)]
        [InlineData(2.8, 1.790943073)]
        [InlineData(2.9, 1.895328088)]
        [InlineData(3, 2)]
        [InlineData(3.5, 2.523598776)]
        [InlineData(4, 3.047197551)]
        [InlineData(4.5, 3.570796327)]
        [InlineData(5, 4.094395102)]
        [InlineData(5.5, 4.617993878)]
        [InlineData(6, 5.141592654)]
        [InlineData(6.5, 5.665191429)]
        [InlineData(7, 6.188790205)]
        [InlineData(7.5, 6.71238898)]
        [InlineData(8, 7.235987756)]
        [InlineData(9, 8.283185307)]
        [InlineData(10, 9.330382858)]
        [Theory]
        public void BetaMinusX(double time, double expectedX)
        {
            var physicsService = new RadiationPhysicsService(
                new RadiationMotionSetup(0, RadiationType.BetaMinus, "#000000"));
            var actualX = physicsService.ComputeX(time);
            Assert.Equal(expectedX, actualX, 4);
        }

        [InlineData(-1.91, -2.000147323)]
        [InlineData(-1.9, -1.989675347)]
        [InlineData(-1.5, -1.570796327)]
        [InlineData(-1, -1.047197551)]
        [InlineData(-0.5, -0.523598776)]
        [InlineData(0, 0)]
        [InlineData(0.1, 0.104671912)]
        [InlineData(0.2, 0.209056927)]
        [InlineData(0.3, 0.31286893)]
        [InlineData(0.4, 0.415823382)]
        [InlineData(0.5, 0.51763809)]
        [InlineData(0.6, 0.618033989)]
        [InlineData(0.7, 0.716735899)]
        [InlineData(0.8, 0.813473286)]
        [InlineData(0.9, 0.907980999)]
        [InlineData(1, 1)]
        [InlineData(1.1, 1.08927807)]
        [InlineData(1.2, 1.175570505)]
        [InlineData(1.3, 1.258640782)]
        [InlineData(1.4, 1.338261213)]
        [InlineData(1.5, 1.414213562)]
        [InlineData(1.6, 1.486289651)]
        [InlineData(1.7, 1.554291923)]
        [InlineData(1.8, 1.618033989)]
        [InlineData(1.9, 1.677341136)]
        [InlineData(2, 1.732050808)]
        [InlineData(2.1, 1.782013048)]
        [InlineData(2.2, 1.827090915)]
        [InlineData(2.3, 1.867160853)]
        [InlineData(2.4, 1.902113033)]
        [InlineData(2.5, 1.931851653)]
        [InlineData(2.6, 1.956295201)]
        [InlineData(2.7, 1.975376681)]
        [InlineData(2.8, 1.989043791)]
        [InlineData(2.9, 1.99725907)]
        [InlineData(3, 2)]
        [InlineData(3.5, 2)]
        [InlineData(4, 2)]
        [InlineData(4.5, 2)]
        [InlineData(5, 2)]
        [InlineData(5.5, 2)]
        [InlineData(6, 2)]
        [InlineData(6.5, 2)]
        [InlineData(7, 2)]
        [InlineData(7.5, 2)]
        [InlineData(8, 2)]
        [InlineData(9, 2)]
        [InlineData(10, 2)]
        [Theory]
        public void BetaMinusY(double time, double expectedY)
        {
            var physicsService = new RadiationPhysicsService(
                new RadiationMotionSetup(0, RadiationType.BetaMinus, "#000000"));
            var actualY = physicsService.ComputeY(time);
            Assert.Equal(expectedY, actualY, 4);
        }

        [InlineData(-1.91, 0)]
        [InlineData(-1.9, 0)]
        [InlineData(-1.5, 0)]
        [InlineData(-1, 0)]
        [InlineData(-0.5, 0)]
        [InlineData(0, 0)]
        [InlineData(0.1, 0)]
        [InlineData(0.2, 0)]
        [InlineData(0.3, 0)]
        [InlineData(0.4, 0)]
        [InlineData(0.5, 0)]
        [InlineData(0.6, 0)]
        [InlineData(0.7, 0)]
        [InlineData(0.8, 0)]
        [InlineData(0.9, 0)]
        [InlineData(1, 0)]
        [InlineData(1.1, 0)]
        [InlineData(1.2, 0)]
        [InlineData(1.3, 0)]
        [InlineData(1.4, 0)]
        [InlineData(1.5, 0)]
        [InlineData(1.6, 0)]
        [InlineData(1.7, 0)]
        [InlineData(1.8, 0)]
        [InlineData(1.9, 0)]
        [InlineData(2, 0)]
        [InlineData(2.1, 0)]
        [InlineData(2.2, 0)]
        [InlineData(2.3, 0)]
        [InlineData(2.4, 0)]
        [InlineData(2.5, 0)]
        [InlineData(2.6, 0)]
        [InlineData(2.7, 0)]
        [InlineData(2.8, 0)]
        [InlineData(2.9, 0)]
        [InlineData(3, 0)]
        [InlineData(3.5, 0)]
        [InlineData(4, 0)]
        [InlineData(4.5, 0)]
        [InlineData(5, 0)]
        [InlineData(5.5, 0)]
        [InlineData(6, 0)]
        [InlineData(6.5, 0)]
        [InlineData(7, 0)]
        [InlineData(7.5, 0)]
        [InlineData(8, 0)]
        [Theory]
        public void NeutronX(double time, double expectedX)
        {
            var physicsService = new RadiationPhysicsService(
                new RadiationMotionSetup(0, RadiationType.Neutron, "#000000"));
            var actualX = physicsService.ComputeX(time);
            Assert.Equal(expectedX, actualX, 4);
        }

        [InlineData(-1.91, -2.000147323)]
        [InlineData(-1.9, -1.989675347)]
        [InlineData(-1.5, -1.570796327)]
        [InlineData(-1, -1.047197551)]
        [InlineData(-0.5, -0.523598776)]
        [InlineData(0, 0)]
        [InlineData(0.1, 0.104719755)]
        [InlineData(0.2, 0.20943951)]
        [InlineData(0.3, 0.314159265)]
        [InlineData(0.4, 0.41887902)]
        [InlineData(0.5, 0.523598776)]
        [InlineData(0.6, 0.628318531)]
        [InlineData(0.7, 0.733038286)]
        [InlineData(0.8, 0.837758041)]
        [InlineData(0.9, 0.942477796)]
        [InlineData(1, 1.047197551)]
        [InlineData(1.1, 1.151917306)]
        [InlineData(1.2, 1.256637061)]
        [InlineData(1.3, 1.361356817)]
        [InlineData(1.4, 1.466076572)]
        [InlineData(1.5, 1.570796327)]
        [InlineData(1.6, 1.675516082)]
        [InlineData(1.7, 1.780235837)]
        [InlineData(1.8, 1.884955592)]
        [InlineData(1.9, 1.989675347)]
        [InlineData(2, 2.094395102)]
        [InlineData(2.1, 2.199114858)]
        [InlineData(2.2, 2.303834613)]
        [InlineData(2.3, 2.408554368)]
        [InlineData(2.4, 2.513274123)]
        [InlineData(2.5, 2.617993878)]
        [InlineData(2.6, 2.722713633)]
        [InlineData(2.7, 2.827433388)]
        [InlineData(2.8, 2.932153143)]
        [InlineData(2.9, 3.036872898)]
        [InlineData(3, 3.141592654)]
        [InlineData(3.5, 3.665191429)]
        [InlineData(4, 4.188790205)]
        [InlineData(4.5, 4.71238898)]
        [InlineData(5, 5.235987756)]
        [InlineData(5.5, 5.759586532)]
        [InlineData(6, 6.283185307)]
        [InlineData(6.5, 6.806784083)]
        [InlineData(7, 7.330382858)]
        [InlineData(7.5, 7.853981634)]
        [InlineData(8, 8.37758041)]
        [Theory]
        public void NeutronY(double time, double expectedY)
        {
            var physicsService = new RadiationPhysicsService(
                new RadiationMotionSetup(0, RadiationType.Neutron, "#000000"));
            var actualY = physicsService.ComputeY(time);
            Assert.Equal(expectedY, actualY, 4);
        }
    }
}
